from aiogram.types import ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import config, support
from aiogram import Bot, Dispatcher, executor, types
from keyboards import ikb_nearest_service, request_a_call, ikb_vin_number, ikb_take_order, key_cancel, ikb_take_order_from_photo
from db import Database
from FSM import DoOrder, SendBackMessage, DoOrderFromVin, CarRepair, DoOrderFromTechPassport
from datetime import datetime


storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)
db = Database('database.db')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    if message.chat.type == 'private':
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
        stic_hello = open('stickers/stichello.webp', 'rb')
        await bot.send_sticker(message.chat.id, stic_hello)
        await bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ø–ª—é—Å!',
                               reply_markup=ReplyKeyboardRemove())
        await message.delete()


@dp.message_handler(commands=['–û—Ç–º–µ–Ω–∞'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await bot.send_message(message.chat.id, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑', reply_markup=ReplyKeyboardRemove())
    await message.delete()


@dp.message_handler(content_types=['contact'])
async def get_phone_number(message: types.Message):
    if message.chat.type == 'private':
        sticker = open('stickers/st_ill_call_you.webp', 'rb')
        await bot.send_sticker(message.chat.id, sticker)
        await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!')
        for admin in config.ADMINS:
            await bot.send_message(admin, f'üìé –ù–û–í–´–ô –ó–ê–ü–†–û–°!\n\n'
                                          f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} '
                                          f'–æ—Å—Ç–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫\n'
                                          f'+{message.contact.phone_number}', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['sendall'])
async def send_to_all_users(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id in config.ADMINS:
            text = message.text[9:]
            for user in db.get_users():
                try:
                    await bot.send_message(user[0], text)
                    if int(user[1]) != 1:
                        db.set_active(user[0], 1)
                except:
                    db.set_active(user[0], 0)

            await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')


@dp.message_handler(commands=['order'])
async def send_order(message: types.Message):
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', reply_markup=key_cancel)
    await DoOrder.car_make.set()
    await message.delete()


@dp.message_handler(commands=['get_users'])
async def send_users_count(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == support.CREATOR:
            result = [user[0] for user in db.get_users()]
            await bot.send_message(support.CREATOR, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(result)}')


@dp.message_handler(commands=['nearest_service'])
async def send_nearest_service(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≥–¥–µ –í–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –Ω–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å',
                               reply_markup=ikb_nearest_service)
        await message.delete()


@dp.callback_query_handler(lambda callback: callback.data.startswith('nearest'))
async def callback_access(callback: types.CallbackQuery):
    #sticker = open('stickers/st_wait_you.webp', 'rb')
    if callback.data == 'nearest_Mozyr':
        await bot.send_location(callback.message.chat.id, latitude=52.047454, longitude=29.255804)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                    text='–ê–¥—Ä–µ—Å: —É–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞ 44–∞, —Ç–µ–ª–µ—Ñ–æ–Ω: –ú–¢–°/–ê1 6643939', reply_markup=None)
        #await bot.send_sticker(callback.message.chat.id, sticker)

    if callback.data == 'nearest_Kalinkovichi':
        await bot.send_location(callback.message.chat.id, latitude=52.132859, longitude=29.329223)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                    text='–ê–¥—Ä–µ—Å: –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è 42, —Ç–µ–ª–µ—Ñ–æ–Ω: –ú–¢–°/–ê1 6643939', reply_markup=None)
        #await bot.send_sticker(callback.message.chat.id, sticker)


@dp.message_handler(commands=['request_a_call'])
async def request_call(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(message.chat.id, "–î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–≤–æ–Ω–∫–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞> .",
                               reply_markup=request_a_call)
        await message.delete()


@dp.message_handler(commands=['find_out_information'])
async def send_info(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(message.chat.id, '–£ –Ω–∞—Å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã;\n'
                                                     '–ó–∞–∫–∞–∑–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≥–æ—Ä–æ–¥—É.\n'
                                                     '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 8:30 –¥–æ 19:00 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö.\n'
                                                     '—Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫ –ú–¢–°/–ê1 664 39 39\n\n'
                                                     '–ë—É–¥–µ–º —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å —É –Ω–∞—Å –≤ —Å–µ—Ä–≤–∏—Å–µ.')
        await message.delete()


@dp.message_handler(state=DoOrder.car_make)
async def load_car_make(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ'] = message.text
    await bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
    await DoOrder.next()


@dp.message_handler(state=DoOrder.car_model)
async def load_car_model(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–ú–æ–¥–µ–ª—å'] = message.text
    await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∏ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è')
    await DoOrder.next()


@dp.message_handler(state=DoOrder.car_engine)
async def load_car_year(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–î–≤–∏–≥–∞—Ç–µ–ª—å'] = message.text
    await bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è')
    await DoOrder.next()


@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) not in range(1980, datetime.now().year + 1),
                    state=DoOrder.car_year)
async def check_digits(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—É—é –¥–∞—Ç—É')


@dp.message_handler(state=DoOrder.car_year)
async def load_car_year(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞'] = message.text
    await bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∑–∞–ø—á–∞—Å—Ç—å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    await DoOrder.next()


@dp.message_handler(state=DoOrder.car_part)
async def load_car_part(message: types.Message, state: FSMContext):
    stic = open('stickers/st_ill_call_you.webp', 'rb')
    async with state.proxy() as data:
        data['–ó–∞–ø—á–∞—Å—Ç—å'] = message.text
    await bot.send_sticker(message.chat.id, stic)
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!')
    result_order = '\n'.join([f"{k}: {v}" for k, v in data.items()])
    user_info = f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, ID: {message.from_user.id}'
    for admin in config.ADMINS:
        await bot.send_message(admin, f"üìù –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n" + result_order + user_info, reply_markup=ikb_take_order)
    await state.finish()


@dp.callback_query_handler(lambda callback: callback.data.startswith('sendback'))
async def sendback(callback: types.CallbackQuery, state=FSMContext):
    if callback.data == 'sendback_order':
        await bot.edit_message_text(chat_id=callback.message.chat.id,
                                    message_id=callback.message.message_id,
                                    text=callback.message.text,
                                    reply_markup=None)
        await SendBackMessage.user_id.set()
        async with state.proxy() as data:
            data['user_id'] = callback.message.text.split()[-1]
        await bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}'.format(data['user_id']))
        await SendBackMessage.next()

    if callback.data == 'sendback_vin_order_photo':
        await bot.edit_message_caption(callback.message.chat.id,
                                       callback.message.message_id,
                                       caption=callback.message.caption,
                                       reply_markup=None)
        print(callback)
        await SendBackMessage.user_id.set()
        async with state.proxy() as data:
            data['user_id'] = callback.message.caption.split()[-1]
        await bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}'.format(data['user_id']))
        await SendBackMessage.next()


@dp.message_handler(state=SendBackMessage.back_message)
async def send_back_massage(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['–æ—Ç–≤–µ—Ç'] = message.text
    back_message = 'üìå –û–¢–í–ï–¢ –ù–ê –í–ê–® –ó–ê–ü–†–û–°!\n\n'
    await bot.send_message(data['user_id'], back_message + data['–æ—Ç–≤–µ—Ç'] + '\n\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!')
    await state.finish()
    await bot.send_message(message.chat.id, '‚úÖ –ó–ê–ü–†–û–° –û–ë–†–ê–ë–û–¢–ê–ù!')


@dp.message_handler(commands=['order_vin'])
async def send_vin_number(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(message.from_user.id, '–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ —É–∫–∞–∑–∞—Ç—å VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è?',
                               reply_markup=ikb_vin_number)
        await message.delete()


@dp.callback_query_handler(lambda callback: callback.data.startswith('order'))
async def order(callback: types.CallbackQuery):
    if callback.data == 'order_from_vin':
        await bot.send_message(callback.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ VIN –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è', reply_markup=key_cancel)
        await bot.edit_message_text(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id,
            text=callback.message.text, reply_markup=None)
        await DoOrderFromVin.car_vin_number.set()
    if callback.data == 'order_from_tech_passport':
        await bot.send_message(callback.message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞', reply_markup=key_cancel)
        await bot.edit_message_text(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id,
            text=callback.message.text, reply_markup=None)
        await DoOrderFromTechPassport.car_tech_passport.set()


@dp.message_handler(state=DoOrderFromVin.car_vin_number)
async def load_vin_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['VIN –Ω–æ–º–µ—Ä'] = message.text
    await bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∑–∞–ø—á–∞—Å—Ç—å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    await DoOrderFromVin.next()


@dp.message_handler(state=DoOrderFromVin.car_part_vin)
async def load_car_part_vin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–ó–∞–ø—á–∞—Å—Ç—å'] = message.text
    result_order = '\n'.join([f"{k}: {v}" for k, v in data.items()])
    user_info = f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, ID: {message.from_user.id}'
    stic = open('stickers/st_ill_call_you.webp', 'rb')
    await bot.send_sticker(message.chat.id, stic)
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!',
                           reply_markup=ReplyKeyboardRemove())
    for admin in config.ADMINS:
        await bot.send_message(admin, f"üìù –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n" + result_order + user_info, reply_markup=ikb_take_order)
    await state.finish()


@dp.message_handler(content_types=['photo'], state=DoOrderFromTechPassport.car_tech_passport)
async def do_order_from_tech_passport(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–§–æ—Ç–æ'] = message.photo[0].file_id
    await bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∑–∞–ø—á–∞—Å—Ç—å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    await DoOrderFromTechPassport.next()


@dp.message_handler(state=DoOrderFromTechPassport.car_part)
async def load_car_part_vin(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–ó–∞–ø—á–∞—Å—Ç—å'] = message.text
    user_info = f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, ID: {message.from_user.id}'
    stic = open('stickers/st_ill_call_you.webp', 'rb')
    await bot.send_sticker(message.chat.id, stic)
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!',
                           reply_markup=ReplyKeyboardRemove())
    for admin in config.ADMINS:
        await bot.send_photo(admin, photo=data['–§–æ—Ç–æ'],
                             caption=f"üìù –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n–ó–∞–ø—á–∞—Å—Ç—å: {data['–ó–∞–ø—á–∞—Å—Ç—å']}" + user_info,
                             reply_markup=ikb_take_order_from_photo)
    await state.finish()


@dp.message_handler(commands=['repair_cost'])
async def repair_cost(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
                                                "<–ù–∞–ø—Ä–∏–º–µ—Ä: BMW E60, –∑–∞–º–µ–Ω–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è>", reply_markup=key_cancel)
        await message.delete()
        await CarRepair.info.set()


@dp.message_handler(state=CarRepair.info)
async def car_info(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['–∏–Ω—Ñ–æ'] = message.text
    stic = open('stickers/st_ill_call_you.webp', 'rb')
    await bot.send_sticker(message.chat.id, stic)
    await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏!',
                           reply_markup=ReplyKeyboardRemove())
    user_info = f'\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name}, ID: {message.from_user.id}'
    for admin in config.ADMINS:
        await bot.send_message(admin, f"üìù –ù–û–í–´–ô –ó–ê–ö–ê–ó - –£–ó–ù–ê–¢–¨ –°–¢–û–ò–ú–û–°–¢–¨ –†–ï–ú–û–ù–¢–ê!\n\n" + data['–∏–Ω—Ñ–æ'] + user_info,
                               reply_markup=ikb_take_order)
    await state.finish()


@dp.message_handler(content_types=['text'])
async def unknown_message(message: types.Message):
    if message.chat.type == 'private':
        stic_ti_cho = open('stickers/sticker1.webp', 'rb')

        await bot.send_message(config.ADMIN, message)
        await bot.send_sticker(message.chat.id, stic_ti_cho)
        await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –í–∞—Å –ø–æ–∫–∞-—á—Ç–æ, –Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—É—á—É—Å—å.')
        await message.delete()


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)